(define binary-add (lambda(L1 L2)
	(let ((len1 (length L1)) (len2 (length L2)))
		(if	(> len1 len2)
			(binaryadd L2 L1)
			(if  (< len1 len2)
				(binary-add (append '(0) L1) L2)
				(recursive-add (append '(0) L1) (append '(0) L2) 0)
))	)	))

(define recursive-add (lambda(L1 L2 carry)
	(if	(null?  L1)  
		'()
		(let	((t  (+ (tail L1) (tail L2) carry)))
			(append	(recursive-add (rmtail L1)
								         (rmtail L2) 
								         (quotient t 2))
						(list (remainder t 2))
))	)	)	)
